<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 3a8c3e77df070a046c9d5b56b68926ca2d7e5ee3 Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa,shimooka,mumumu -->
<refentry xml:id="function.strtotime" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>strtotime</refname>
  <refpurpose>
   英文形式の日付を Unix タイムスタンプに変換する
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>strtotime</methodname>
   <methodparam><type>string</type><parameter>datetime</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>baseTimestamp</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   この関数は英語の書式での日付を含む文字列が指定されることを期待しており、
   その書式を Unix タイムスタンプ (1970 年 1 月 1 日 00:00:00 UTC からの経過秒数) に変換しようとします。
   <parameter>baseTimestamp</parameter> が指定された場合は、そのタイムスタンプを基準とした相対時刻のタイムスタンプに変換します。
   <parameter>baseTimestamp</parameter> が指定されていない場合は、現在時刻を基準とした相対時刻のタイムスタンプに変換します。
   パースされる日付を含む文字列の書式は、
   <link linkend="datetime.formats">サポートする日付と時刻の書式</link> で定義されており、考慮すべき微妙な点がいくつかあります。
   サポートする日付と時刻の書式について、読んでおくことを強く推奨します。
  </simpara>
  <warning>
   <para>
    この関数が返す Unixタイムスタンプ は、タイムゾーンの情報を含んでいません。
    日付/時刻の情報を含めて計算するには、
    より多くの機能がある <classname>DateTimeImmutable</classname> を使うべきです。
   </para>
  </warning>
  <para>
   この関数の各パラメータでは、パラメータ内でタイムゾーンを指定しない限りはデフォルトのタイムゾーンを使います。
   意図的にそうする場合は別として、パラメータごとにタイムゾーンを変えてしまったりしないように気をつけましょう。
   デフォルトのタイムゾーンを定義する方法については
   <function>date_default_timezone_get</function> を参照ください。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>datetime</parameter></term>
     <listitem>
      <para>&date.formats.parameter;</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>baseTimestamp</parameter></term>
     <listitem>
      <para>
       返される値を計算するために使用されるタイムスタンプ。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   成功時はタイムスタンプ、そうでなければ &false; を返します。
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
   
   &date.timezone.errors.description;
 
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <parameter>baseTimestamp</parameter> は、nullable になりました。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>strtotime</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
echo strtotime("now"), "\n";
echo strtotime("10 September 2000"), "\n";
echo strtotime("+1 day"), "\n";
echo strtotime("+1 week"), "\n";
echo strtotime("+1 week 2 days 4 hours 2 seconds"), "\n";
echo strtotime("next Thursday"), "\n";
echo strtotime("last Monday"), "\n";
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>失敗のチェック</title>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'Not Good';

if (($timestamp = strtotime($str)) === false) {
    echo "The string ($str) is bogus";
} else {
    echo "$str == " . date('l dS \o\f F Y h:i:s A', $timestamp);
}
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    "相対的な" 日付とは、
    日付/時刻の一部の情報が与えられていないということでもあります。
    与えられていない情報は <parameter>baseTimestamp</parameter>
    から取得されます。
    つまり、2022年5月31日 (31st of May 2022) に
    <code>strtotime('February')</code> を実行すると、
    <literal>31 February 2022</literal> と解釈されて日付がオーバーフローし、
    <literal>3 March</literal> になります(うるう年の場合、<literal>2 March</literal> になります)。
    <code>strtotime('1 February')</code> や
    <code>strtotime('first day of February')</code>
    を使うことで、この問題は回避できます。
   </para>
  </note>
  <note>
   <para>
    年を 2 桁の数値で指定した場合、その値が 00-69 なら 2000-2069 に、
    70-99 なら 1970-1999 にそれぞれ変換されます。
    32 ビットシステム上での相違点 (2038-01-19 03:14:07
    までの日付しか表せない) については以下の注意を参照ください。
   </para>
  </note>
  <note>
   <para>
    タイムスタンプの有効な範囲は、通常、Fri, 13 Dec 1901 20:45:54
    UTC から Tue, 19 Jan 2038 03:14:07 UTC までです (これらは、32
    ビット符号付整数の最大及び最小に一致します)。
   </para>
   <para>
    64 ビット版の PHP では、タイムスタンプの有効範囲は事実上無制限です。
    というのも、64 ビットでは過去側も未来側も約 2930 億年を表せるからです。
   </para>
  </note>
  <note>
   <para>
    この関数を使って日付の足し算や引き算を行うことはおすすめできません。
    <methodname>DateTime::add</methodname> や
    <methodname>DateTime::sub</methodname> を使いましょう。
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><classname>DateTimeImmutable</classname></member>
    <member><methodname>DateTimeImmutable::createFromFormat</methodname></member>
    <member><link linkend="datetime.formats">日付と時刻の書式</link></member>
    <member><function>checkdate</function></member>
    <member><function>strptime</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
