<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 46a9cdd2dbef4ec89bf65fad9930e2feb78bbb98 Maintainer: nsfisis Status: working -->

<book xml:id="book.ffi" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <?phpdoc extension-membership="bundled" ?>
 <title>外部関数インターフェース</title>
 <titleabbrev>FFI</titleabbrev>

 <preface xml:id="intro.ffi">
  &reftitle.intro;
  <para>
   この拡張は、Zend 拡張 API の深い知識が無くとも、あるいは第三の中間言語を学ぶことをせずとも、
   純粋な PHP で共有ライブラリ (<filename>.DLL</filename> または <filename>.so</filename>)
   を読み込んだり、C の関数を呼び出したり、C のデータ構造にアクセスしたりすることを
   可能とします。
   公開 API は単一のクラス <classname>FFI</classname> として実装されています。
   このクラスの静的メソッド (そのうちのいくつかは非静的メソッドとしても呼び出せます) や
   オーバーロードされたオブジェクトメソッドが、実際の C のデータとのやり取りを行います。
  </para>
  <caution>
   <para>
    FFI は、システムと低レベルでやり取りできるため危険です。
    FFI 拡張は、C 言語と使われる C の API についての実用的な知識を持つ開発者のみによって
    用いられるべきです。リスクを最小化するため、FFI API の使用は
    <link linkend="ini.ffi.enable">ffi.enable</link> &php.ini; ディレクティブによって制限できます。
   </para>
  </caution>
  <note>
   <para>
    FFI 拡張は、古くからある PHP 拡張の API を廃止しようとしているわけではありません。
    これは C の関数やデータ構造へのアドホックなインターフェースを提供するにすぎないのです。
   </para>
  </note>
  <tip>
   <para>
    今のところ、FFI のデータ構造へのアクセスは、ネイティブな PHP の配列やオブジェクトへのアクセスと比べて
    非常に (約 2 倍) 低速です。したがって、速度のために FFI 拡張を使うことには意味がありません。
    しかし、メモリー消費を減らすために使うのは意味があるかもしれません。
   </para>
  </tip>
 </preface>

 &reference.ffi.setup;
 &reference.ffi.examples;
 &reference.ffi.ffi;
 &reference.ffi.ffi.cdata;
 &reference.ffi.ffi.ctype;
 &reference.ffi.ffi.exception;
 &reference.ffi.ffi.parserexception;
</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
