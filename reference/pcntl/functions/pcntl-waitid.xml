<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 4fbe0691312fbf85d67674f2e80c1abb5c36187f Maintainer: mumumu Status: ready -->
<refentry xml:id="function.pcntl-waitid" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pcntl_waitid</refname>
  <refpurpose>子プロセスの状態変化を待つ</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>pcntl_waitid</methodname>
   <methodparam choice="opt"><type>int</type><parameter>idtype</parameter><initializer><constant>P_ALL</constant></initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>id</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">info</parameter><initializer>[]</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>WEXITED</constant></initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">resource_usage</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   呼び出し元の子プロセスにおける 終了、停止、
   および/または 継続イベントに関連するステータス情報を取得します。
  </para>

  <para>
   <constant>WNOHANG</constant> フラグを渡さない限り、
   呼び出し元のプロセスはエラーが発生するか、
   以下を全て満たすステータス情報が利用できるようになるまでブロックします。
   <itemizedlist>
    <listitem>
     <simpara>
      <parameter>idtype</parameter> と <parameter>id</parameter>
      で指定された一連の子プロセスのうちの、
      いずれかの子プロセスのステータス情報であること
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      ステータス情報の状態変化が、
      <parameter>flags</parameter> で設定した状態変化フラグのひとつにマッチすること
     </simpara>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   マッチしたステータス情報が、<function>pcntl_waitid</function>
   の呼び出し前に利用可能になった場合、
   呼び出しは直ぐに返ります。
   マッチしたステータス情報がふたつ以上の子プロセスで利用可能になった場合、
   それらのステータスの順番は不定です。
  </para>

  <note>
   <para>
    このドキュメントは <literal>waitid</literal>
    関数の POSIX 仕様を満たしていますし、
    Linux, NetBSD, FreeBSD に特有の追加パラメータもいくつか満たしています。
    システムで <literal>waitid</literal> がどのように動作するかの詳細は、
    システムの <literal>waitid(2)</literal> のマニュアルを参照ください。
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>idtype</parameter></term>
    <term><parameter>id</parameter></term>
    <listitem>
     <simpara>
      <parameter>idtype</parameter> と <parameter>id</parameter> は、
      どの子プロセスを待つのかを指定するのに使います。
     </simpara>
     <table>
      <title>POSIX 標準の <parameter>idtype</parameter> と <parameter>id</parameter></title>
      <tgroup cols="2">
       <tbody>
        <row>
         <entry><parameter>idtype</parameter> が <literal>P_ALL</literal> の場合</entry>
         <entry>
          全ての子プロセスを待ちます。<parameter>id</parameter> は無視されます。
         </entry>
        </row>
        <row>
         <entry><parameter>idtype</parameter> が <literal>P_PID</literal> の場合</entry>
         <entry>
          プロセスID が <parameter>id</parameter> に等しい子プロセスを待ちます。
         </entry>
        </row>
        <row>
         <entry><parameter>idtype</parameter> が <literal>P_PGID</literal> の場合</entry>
         <entry>
          プロセスグループID が <parameter>id</parameter> に等しいすべての子プロセスを待ちます。
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     <table>
      <title>Linux 特有の <parameter>idtype</parameter> と <parameter>id</parameter></title>
      <tgroup cols="2">
       <tbody>
        <row>
         <entry><parameter>idtype</parameter> が <literal>P_PIDFD</literal> の場合(Linux 5.4 以降)</entry>
         <entry>
          <parameter>id</parameter> で指定した
          PID ファイルディスクリプタで参照している子プロセスを待ちます。
          (PID ファイルディスクリプタに関する詳しい情報は、
          Linux の <literal>pidfd_open(2)</literal> man ページを参照ください)
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     <table>
      <title>NetBSD と FreeBSD に特有の <parameter>idtype</parameter> と <parameter>id</parameter></title>
      <tgroup cols="2">
       <tbody>
        <row>
         <entry>
          <parameter>idtype</parameter> が <literal>P_UID</literal> の場合
         </entry>
         <entry>
          実効ユーザーID が <parameter>id</parameter>
          に等しいプロセスを待ちます。
         </entry>
        </row>
        <row>
         <entry>
          <parameter>idtype</parameter> が <literal>P_GID</literal> の場合
         </entry>
         <entry>
          実効グループID が <parameter>id</parameter>
          に等しいプロセスを待ちます。
         </entry>
        </row>
        <row>
         <entry>
          <parameter>idtype</parameter> が <literal>P_SID</literal> の場合
         </entry>
         <entry>
          セッションID が <parameter>id</parameter> に等しいプロセスを待ちます。
          子プロセスが自分自身のセッションを開始していた場合、
          そのセッションIDはプロセスIDと等しくなります。
          そうでない場合、子プロセスのセッションIDは、
          呼び出し側のセッションIDとマッチします。
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     <table>
      <title>FreeBSD に特有の <parameter>idtype</parameter> と <parameter>id</parameter></title>
      <tgroup cols="2">
       <tbody>
        <row>
         <entry>
          <parameter>idtype</parameter> が <literal>P_JAILID</literal> の場合
         </entry>
         <entry>
          jail の識別子が <parameter>id</parameter> に等しい
          jail 中のプロセスを待ちます。
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>info</parameter></term>
    <listitem>
     <para>
      <parameter>info</parameter> には、
      シグナルに関する情報を含めた情報を設定します。
     </para>
     <para>
      <parameter>info</parameter> 配列には、以下のキーが含まれています:
      <simplelist>
       <member><literal>signo</literal>: Signal number</member>
       <member><literal>errno</literal>: System error number</member>
       <member><literal>code</literal>: Signal code</member>
       <member><literal>status</literal>: Exit value or signal</member>
       <member><literal>pid</literal>: Sending process ID</member>
       <member><literal>uid</literal>: Real user ID of sending process</member>
       <member><literal>utime</literal>: User time consumed</member>
       <member><literal>stime</literal>: System time consumed</member>
      </simplelist>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>flags</parameter></term>
    <listitem>
     <para>
      <parameter>flags</parameter> は、以下の定数を0個以上 OR で結んだ値です。　
      <table>
       <title><parameter>flags</parameter> に設定できる値</title>
       <tgroup cols="2">
        <tbody>
         <row>
          <entry><constant>WCONTINUED</constant></entry>
          <entry>
           以下にあてはまる任意の子プロセスについて、その状態が返されます:
           ジョブの制御停止から動作が継続して以降、
           そのステータスが報告されていないか、
           <function>pcntl_waitid</function> を
           <constant>WNOWAIT</constant>
           フラグ付きで呼び出したことによってのみステータスが報告された子プロセス。
          </entry>
         </row>
         <row>
          <entry><constant>WEXITED</constant></entry>
          <entry>
           終了したプロセスを待つ
          </entry>
         </row>
         <row>
          <entry><constant>WNOHANG</constant></entry>
          <entry>
           ステータスが利用可能でない場合でもハングしない。
           つまり、すぐに制御を戻します。
          </entry>
         </row>
         <row>
          <entry><constant>WNOWAIT</constant></entry>
          <entry>
           <parameter>info</parameter> で返されたプロセスの状態が
           waitable な状態であってもそのままにする。
           これはプロセスの状態に影響しません。つまり、
           この関数呼び出しが完了した後、
           プロセスを再度待つことができるということです。
          </entry>
         </row>
         <row>
          <entry><constant>WSTOPPED</constant></entry>
          <entry>
           シグナルを受け取って停止した子プロセスについて、
           そのステータスが報告されていないか、
           <function>pcntl_waitid</function> を
           <constant>WNOWAIT</constant>
           フラグ付きで呼び出したことによってのみに報告された場合、
           その子プロセスの状態が返されます。
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>resource_usage</parameter></term>
    <listitem>
     <para>
      <parameter>resource_usage</parameter> には、
      子プロセスからリソース利用状況の統計を含めた配列を設定します。
      この情報は、(FreeBSD のように)wait6 システムコールが利用可能な場合か、
      生の waitid システムコールを利用できる Linux でサポートされています。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <constant>WNOHANG</constant> が指定されており、
   かつ <parameter>idtype</parameter> と <parameter>id</parameter>
   で指定された任意のプロセスでステータスが利用できない場合
   <function>pcntl_waitid</function> は &true; を返します。
  </para>

  <para>
   子プロセスのうちのひとつで、
   状態が変化した場合、
   <function>pcntl_waitid</function> は &true; を返します。
  </para>

  <para>
   上記以外の場合、&false; が返され、
   エラー番号 <literal>errno</literal> を取得するために
   <function>pcntl_get_last_error</function> が使えます。
  </para>

  <note>
   <para>
    エラー番号 <literal>errno</literal> が取得できた場合、
    それに関連付けられたテキストメッセージを取得するために
    <function>pcntl_strerror</function> が使えます。
   </para>
  </note>
 </refsect1>

  <refsect1 role="errors">
  &reftitle.errors;
  <table>
   <title>エラー番号 (<literal>errno</literal>) の値</title>
   <tgroup cols="2">
    <tbody>
     <row>
      <entry><constant>ECHILD</constant></entry>
      <entry>
       呼び出し側のプロセスには、待っていない子プロセスはありません。
      </entry>
     </row>
     <row>
      <entry><constant>EINTR</constant></entry>
      <entry>
       <function>pcntl_waitid</function> がシグナルで割り込まれました。
      </entry>
     </row>
     <row>
      <entry><constant>EINVAL</constant></entry>
      <entry>
       <parameter>flags</parameter> に不正な値が指定されたか、
       <parameter>idtype</parameter> と <parameter>id</parameter>
       で不正なプロセスのセットを指定しました。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.5.0</entry>
      <entry>
       <parameter>resource_usage</parameter> が追加されました。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pcntl_waitpid</function></member>
    <member><function>pcntl_wait</function></member>
    <member><function>pcntl_fork</function></member>
    <member><function>pcntl_signal</function></member>
    <member><function>pcntl_wifexited</function></member>
    <member><function>pcntl_wifstopped</function></member>
    <member><function>pcntl_wifsignaled</function></member>
    <member><function>pcntl_wexitstatus</function></member>
    <member><function>pcntl_wtermsig</function></member>
    <member><function>pcntl_wstopsig</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
